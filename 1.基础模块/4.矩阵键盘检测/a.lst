                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.2.0 #13081 (Mac OS X ppc)
                                      4 ;--------------------------------------------------------
                                      5 	.module a
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _display
                                     13 	.globl _delay
                                     14 	.globl _TF2
                                     15 	.globl _EXF2
                                     16 	.globl _RCLK
                                     17 	.globl _TCLK
                                     18 	.globl _EXEN2
                                     19 	.globl _TR2
                                     20 	.globl _C_T2
                                     21 	.globl _CP_RL2
                                     22 	.globl _T2CON_7
                                     23 	.globl _T2CON_6
                                     24 	.globl _T2CON_5
                                     25 	.globl _T2CON_4
                                     26 	.globl _T2CON_3
                                     27 	.globl _T2CON_2
                                     28 	.globl _T2CON_1
                                     29 	.globl _T2CON_0
                                     30 	.globl _PT2
                                     31 	.globl _ET2
                                     32 	.globl _CY
                                     33 	.globl _AC
                                     34 	.globl _F0
                                     35 	.globl _RS1
                                     36 	.globl _RS0
                                     37 	.globl _OV
                                     38 	.globl _F1
                                     39 	.globl _P
                                     40 	.globl _PS
                                     41 	.globl _PT1
                                     42 	.globl _PX1
                                     43 	.globl _PT0
                                     44 	.globl _PX0
                                     45 	.globl _RD
                                     46 	.globl _WR
                                     47 	.globl _T1
                                     48 	.globl _T0
                                     49 	.globl _INT1
                                     50 	.globl _INT0
                                     51 	.globl _TXD
                                     52 	.globl _RXD
                                     53 	.globl _P3_7
                                     54 	.globl _P3_6
                                     55 	.globl _P3_5
                                     56 	.globl _P3_4
                                     57 	.globl _P3_3
                                     58 	.globl _P3_2
                                     59 	.globl _P3_1
                                     60 	.globl _P3_0
                                     61 	.globl _EA
                                     62 	.globl _ES
                                     63 	.globl _ET1
                                     64 	.globl _EX1
                                     65 	.globl _ET0
                                     66 	.globl _EX0
                                     67 	.globl _P2_7
                                     68 	.globl _P2_6
                                     69 	.globl _P2_5
                                     70 	.globl _P2_4
                                     71 	.globl _P2_3
                                     72 	.globl _P2_2
                                     73 	.globl _P2_1
                                     74 	.globl _P2_0
                                     75 	.globl _SM0
                                     76 	.globl _SM1
                                     77 	.globl _SM2
                                     78 	.globl _REN
                                     79 	.globl _TB8
                                     80 	.globl _RB8
                                     81 	.globl _TI
                                     82 	.globl _RI
                                     83 	.globl _P1_7
                                     84 	.globl _P1_6
                                     85 	.globl _P1_5
                                     86 	.globl _P1_4
                                     87 	.globl _P1_3
                                     88 	.globl _P1_2
                                     89 	.globl _P1_1
                                     90 	.globl _P1_0
                                     91 	.globl _TF1
                                     92 	.globl _TR1
                                     93 	.globl _TF0
                                     94 	.globl _TR0
                                     95 	.globl _IE1
                                     96 	.globl _IT1
                                     97 	.globl _IE0
                                     98 	.globl _IT0
                                     99 	.globl _P0_7
                                    100 	.globl _P0_6
                                    101 	.globl _P0_5
                                    102 	.globl _P0_4
                                    103 	.globl _P0_3
                                    104 	.globl _P0_2
                                    105 	.globl _P0_1
                                    106 	.globl _P0_0
                                    107 	.globl _TH2
                                    108 	.globl _TL2
                                    109 	.globl _RCAP2H
                                    110 	.globl _RCAP2L
                                    111 	.globl _T2CON
                                    112 	.globl _B
                                    113 	.globl _ACC
                                    114 	.globl _PSW
                                    115 	.globl _IP
                                    116 	.globl _P3
                                    117 	.globl _IE
                                    118 	.globl _P2
                                    119 	.globl _SBUF
                                    120 	.globl _SCON
                                    121 	.globl _P1
                                    122 	.globl _TH1
                                    123 	.globl _TH0
                                    124 	.globl _TL1
                                    125 	.globl _TL0
                                    126 	.globl _TMOD
                                    127 	.globl _TCON
                                    128 	.globl _PCON
                                    129 	.globl _DPH
                                    130 	.globl _DPL
                                    131 	.globl _SP
                                    132 	.globl _P0
                                    133 	.globl _table
                                    134 	.globl _key
                                    135 	.globl _temp
                                    136 	.globl _k
                                    137 	.globl _j
                                    138 	.globl _i
                                    139 ;--------------------------------------------------------
                                    140 ; special function registers
                                    141 ;--------------------------------------------------------
                                    142 	.area RSEG    (ABS,DATA)
      000000                        143 	.org 0x0000
                           000080   144 _P0	=	0x0080
                           000081   145 _SP	=	0x0081
                           000082   146 _DPL	=	0x0082
                           000083   147 _DPH	=	0x0083
                           000087   148 _PCON	=	0x0087
                           000088   149 _TCON	=	0x0088
                           000089   150 _TMOD	=	0x0089
                           00008A   151 _TL0	=	0x008a
                           00008B   152 _TL1	=	0x008b
                           00008C   153 _TH0	=	0x008c
                           00008D   154 _TH1	=	0x008d
                           000090   155 _P1	=	0x0090
                           000098   156 _SCON	=	0x0098
                           000099   157 _SBUF	=	0x0099
                           0000A0   158 _P2	=	0x00a0
                           0000A8   159 _IE	=	0x00a8
                           0000B0   160 _P3	=	0x00b0
                           0000B8   161 _IP	=	0x00b8
                           0000D0   162 _PSW	=	0x00d0
                           0000E0   163 _ACC	=	0x00e0
                           0000F0   164 _B	=	0x00f0
                           0000C8   165 _T2CON	=	0x00c8
                           0000CA   166 _RCAP2L	=	0x00ca
                           0000CB   167 _RCAP2H	=	0x00cb
                           0000CC   168 _TL2	=	0x00cc
                           0000CD   169 _TH2	=	0x00cd
                                    170 ;--------------------------------------------------------
                                    171 ; special function bits
                                    172 ;--------------------------------------------------------
                                    173 	.area RSEG    (ABS,DATA)
      000000                        174 	.org 0x0000
                           000080   175 _P0_0	=	0x0080
                           000081   176 _P0_1	=	0x0081
                           000082   177 _P0_2	=	0x0082
                           000083   178 _P0_3	=	0x0083
                           000084   179 _P0_4	=	0x0084
                           000085   180 _P0_5	=	0x0085
                           000086   181 _P0_6	=	0x0086
                           000087   182 _P0_7	=	0x0087
                           000088   183 _IT0	=	0x0088
                           000089   184 _IE0	=	0x0089
                           00008A   185 _IT1	=	0x008a
                           00008B   186 _IE1	=	0x008b
                           00008C   187 _TR0	=	0x008c
                           00008D   188 _TF0	=	0x008d
                           00008E   189 _TR1	=	0x008e
                           00008F   190 _TF1	=	0x008f
                           000090   191 _P1_0	=	0x0090
                           000091   192 _P1_1	=	0x0091
                           000092   193 _P1_2	=	0x0092
                           000093   194 _P1_3	=	0x0093
                           000094   195 _P1_4	=	0x0094
                           000095   196 _P1_5	=	0x0095
                           000096   197 _P1_6	=	0x0096
                           000097   198 _P1_7	=	0x0097
                           000098   199 _RI	=	0x0098
                           000099   200 _TI	=	0x0099
                           00009A   201 _RB8	=	0x009a
                           00009B   202 _TB8	=	0x009b
                           00009C   203 _REN	=	0x009c
                           00009D   204 _SM2	=	0x009d
                           00009E   205 _SM1	=	0x009e
                           00009F   206 _SM0	=	0x009f
                           0000A0   207 _P2_0	=	0x00a0
                           0000A1   208 _P2_1	=	0x00a1
                           0000A2   209 _P2_2	=	0x00a2
                           0000A3   210 _P2_3	=	0x00a3
                           0000A4   211 _P2_4	=	0x00a4
                           0000A5   212 _P2_5	=	0x00a5
                           0000A6   213 _P2_6	=	0x00a6
                           0000A7   214 _P2_7	=	0x00a7
                           0000A8   215 _EX0	=	0x00a8
                           0000A9   216 _ET0	=	0x00a9
                           0000AA   217 _EX1	=	0x00aa
                           0000AB   218 _ET1	=	0x00ab
                           0000AC   219 _ES	=	0x00ac
                           0000AF   220 _EA	=	0x00af
                           0000B0   221 _P3_0	=	0x00b0
                           0000B1   222 _P3_1	=	0x00b1
                           0000B2   223 _P3_2	=	0x00b2
                           0000B3   224 _P3_3	=	0x00b3
                           0000B4   225 _P3_4	=	0x00b4
                           0000B5   226 _P3_5	=	0x00b5
                           0000B6   227 _P3_6	=	0x00b6
                           0000B7   228 _P3_7	=	0x00b7
                           0000B0   229 _RXD	=	0x00b0
                           0000B1   230 _TXD	=	0x00b1
                           0000B2   231 _INT0	=	0x00b2
                           0000B3   232 _INT1	=	0x00b3
                           0000B4   233 _T0	=	0x00b4
                           0000B5   234 _T1	=	0x00b5
                           0000B6   235 _WR	=	0x00b6
                           0000B7   236 _RD	=	0x00b7
                           0000B8   237 _PX0	=	0x00b8
                           0000B9   238 _PT0	=	0x00b9
                           0000BA   239 _PX1	=	0x00ba
                           0000BB   240 _PT1	=	0x00bb
                           0000BC   241 _PS	=	0x00bc
                           0000D0   242 _P	=	0x00d0
                           0000D1   243 _F1	=	0x00d1
                           0000D2   244 _OV	=	0x00d2
                           0000D3   245 _RS0	=	0x00d3
                           0000D4   246 _RS1	=	0x00d4
                           0000D5   247 _F0	=	0x00d5
                           0000D6   248 _AC	=	0x00d6
                           0000D7   249 _CY	=	0x00d7
                           0000AD   250 _ET2	=	0x00ad
                           0000BD   251 _PT2	=	0x00bd
                           0000C8   252 _T2CON_0	=	0x00c8
                           0000C9   253 _T2CON_1	=	0x00c9
                           0000CA   254 _T2CON_2	=	0x00ca
                           0000CB   255 _T2CON_3	=	0x00cb
                           0000CC   256 _T2CON_4	=	0x00cc
                           0000CD   257 _T2CON_5	=	0x00cd
                           0000CE   258 _T2CON_6	=	0x00ce
                           0000CF   259 _T2CON_7	=	0x00cf
                           0000C8   260 _CP_RL2	=	0x00c8
                           0000C9   261 _C_T2	=	0x00c9
                           0000CA   262 _TR2	=	0x00ca
                           0000CB   263 _EXEN2	=	0x00cb
                           0000CC   264 _TCLK	=	0x00cc
                           0000CD   265 _RCLK	=	0x00cd
                           0000CE   266 _EXF2	=	0x00ce
                           0000CF   267 _TF2	=	0x00cf
                                    268 ;--------------------------------------------------------
                                    269 ; overlayable register banks
                                    270 ;--------------------------------------------------------
                                    271 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        272 	.ds 8
                                    273 ;--------------------------------------------------------
                                    274 ; internal ram data
                                    275 ;--------------------------------------------------------
                                    276 	.area DSEG    (DATA)
      000000                        277 _i::
      000000                        278 	.ds 1
      000001                        279 _j::
      000001                        280 	.ds 1
      000002                        281 _k::
      000002                        282 	.ds 1
      000003                        283 _temp::
      000003                        284 	.ds 1
      000004                        285 _key::
      000004                        286 	.ds 1
      000005                        287 _table::
      000005                        288 	.ds 16
                                    289 ;--------------------------------------------------------
                                    290 ; overlayable items in internal ram
                                    291 ;--------------------------------------------------------
                                    292 	.area	OSEG    (OVR,DATA)
                                    293 	.area	OSEG    (OVR,DATA)
                                    294 ;--------------------------------------------------------
                                    295 ; Stack segment in internal ram
                                    296 ;--------------------------------------------------------
                                    297 	.area	SSEG
      000000                        298 __start__stack:
      000000                        299 	.ds	1
                                    300 
                                    301 ;--------------------------------------------------------
                                    302 ; indirectly addressable internal ram data
                                    303 ;--------------------------------------------------------
                                    304 	.area ISEG    (DATA)
                                    305 ;--------------------------------------------------------
                                    306 ; absolute internal ram data
                                    307 ;--------------------------------------------------------
                                    308 	.area IABS    (ABS,DATA)
                                    309 	.area IABS    (ABS,DATA)
                                    310 ;--------------------------------------------------------
                                    311 ; bit data
                                    312 ;--------------------------------------------------------
                                    313 	.area BSEG    (BIT)
                                    314 ;--------------------------------------------------------
                                    315 ; paged external ram data
                                    316 ;--------------------------------------------------------
                                    317 	.area PSEG    (PAG,XDATA)
                                    318 ;--------------------------------------------------------
                                    319 ; external ram data
                                    320 ;--------------------------------------------------------
                                    321 	.area XSEG    (XDATA)
                                    322 ;--------------------------------------------------------
                                    323 ; absolute external ram data
                                    324 ;--------------------------------------------------------
                                    325 	.area XABS    (ABS,XDATA)
                                    326 ;--------------------------------------------------------
                                    327 ; external initialized ram data
                                    328 ;--------------------------------------------------------
                                    329 	.area XISEG   (XDATA)
                                    330 	.area HOME    (CODE)
                                    331 	.area GSINIT0 (CODE)
                                    332 	.area GSINIT1 (CODE)
                                    333 	.area GSINIT2 (CODE)
                                    334 	.area GSINIT3 (CODE)
                                    335 	.area GSINIT4 (CODE)
                                    336 	.area GSINIT5 (CODE)
                                    337 	.area GSINIT  (CODE)
                                    338 	.area GSFINAL (CODE)
                                    339 	.area CSEG    (CODE)
                                    340 ;--------------------------------------------------------
                                    341 ; interrupt vector
                                    342 ;--------------------------------------------------------
                                    343 	.area HOME    (CODE)
      000000                        344 __interrupt_vect:
      000000 02r00r00         [24]  345 	ljmp	__sdcc_gsinit_startup
                                    346 ;--------------------------------------------------------
                                    347 ; global & static initialisations
                                    348 ;--------------------------------------------------------
                                    349 	.area HOME    (CODE)
                                    350 	.area GSINIT  (CODE)
                                    351 	.area GSFINAL (CODE)
                                    352 	.area GSINIT  (CODE)
                                    353 	.globl __sdcc_gsinit_startup
                                    354 	.globl __sdcc_program_startup
                                    355 	.globl __start__stack
                                    356 	.globl __mcs51_genXINIT
                                    357 	.globl __mcs51_genXRAMCLEAR
                                    358 	.globl __mcs51_genRAMCLEAR
                                    359 ;	a.c:6: unsigned char i=100;
      000000 75*00 64         [24]  360 	mov	_i,#0x64
                                    361 ;	a.c:13: unsigned char table[]={0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,
      000003 75*05 3F         [24]  362 	mov	_table,#0x3f
      000006 75*06 06         [24]  363 	mov	(_table + 0x0001),#0x06
      000009 75*07 5B         [24]  364 	mov	(_table + 0x0002),#0x5b
      00000C 75*08 4F         [24]  365 	mov	(_table + 0x0003),#0x4f
      00000F 75*09 66         [24]  366 	mov	(_table + 0x0004),#0x66
      000012 75*0A 6D         [24]  367 	mov	(_table + 0x0005),#0x6d
      000015 75*0B 7D         [24]  368 	mov	(_table + 0x0006),#0x7d
      000018 75*0C 07         [24]  369 	mov	(_table + 0x0007),#0x07
      00001B 75*0D 7F         [24]  370 	mov	(_table + 0x0008),#0x7f
      00001E 75*0E 6F         [24]  371 	mov	(_table + 0x0009),#0x6f
      000021 75*0F 77         [24]  372 	mov	(_table + 0x000a),#0x77
      000024 75*10 7C         [24]  373 	mov	(_table + 0x000b),#0x7c
      000027 75*11 39         [24]  374 	mov	(_table + 0x000c),#0x39
      00002A 75*12 5E         [24]  375 	mov	(_table + 0x000d),#0x5e
      00002D 75*13 79         [24]  376 	mov	(_table + 0x000e),#0x79
      000030 75*14 71         [24]  377 	mov	(_table + 0x000f),#0x71
                                    378 	.area GSFINAL (CODE)
      000000 02r00r03         [24]  379 	ljmp	__sdcc_program_startup
                                    380 ;--------------------------------------------------------
                                    381 ; Home
                                    382 ;--------------------------------------------------------
                                    383 	.area HOME    (CODE)
                                    384 	.area HOME    (CODE)
      000003                        385 __sdcc_program_startup:
      000003 02r00r25         [24]  386 	ljmp	_main
                                    387 ;	return from main will return to caller
                                    388 ;--------------------------------------------------------
                                    389 ; code
                                    390 ;--------------------------------------------------------
                                    391 	.area CSEG    (CODE)
                                    392 ;------------------------------------------------------------
                                    393 ;Allocation info for local variables in function 'delay'
                                    394 ;------------------------------------------------------------
                                    395 ;i                         Allocated to registers 
                                    396 ;------------------------------------------------------------
                                    397 ;	a.c:8: void delay(unsigned char i)
                                    398 ;	-----------------------------------------
                                    399 ;	 function delay
                                    400 ;	-----------------------------------------
      000000                        401 _delay:
                           000007   402 	ar7 = 0x07
                           000006   403 	ar6 = 0x06
                           000005   404 	ar5 = 0x05
                           000004   405 	ar4 = 0x04
                           000003   406 	ar3 = 0x03
                           000002   407 	ar2 = 0x02
                           000001   408 	ar1 = 0x01
                           000000   409 	ar0 = 0x00
      000000 85 82*01         [24]  410 	mov	_j,dpl
                                    411 ;	a.c:10: for(j=i;j>0;j--)
      000003                        412 00106$:
      000003 E5*01            [12]  413 	mov	a,_j
      000005 60 0A            [24]  414 	jz	00108$
                                    415 ;	a.c:11: for(k=125;k>0;k--);
      000007 75*02 7D         [24]  416 	mov	_k,#0x7d
      00000A                        417 00104$:
      00000A D5*02 FD         [24]  418 	djnz	_k,00104$
                                    419 ;	a.c:10: for(j=i;j>0;j--)
      00000D 15*01            [12]  420 	dec	_j
      00000F 80 F2            [24]  421 	sjmp	00106$
      000011                        422 00108$:
                                    423 ;	a.c:12: }
      000011 22               [24]  424 	ret
                                    425 ;------------------------------------------------------------
                                    426 ;Allocation info for local variables in function 'display'
                                    427 ;------------------------------------------------------------
                                    428 ;num                       Allocated to registers r7 
                                    429 ;------------------------------------------------------------
                                    430 ;	a.c:17: display(unsigned char num)
                                    431 ;	-----------------------------------------
                                    432 ;	 function display
                                    433 ;	-----------------------------------------
      000012                        434 _display:
                                    435 ;	a.c:19: P0=table[num];
      000012 E5 82            [12]  436 	mov	a,dpl
      000014 24r05            [12]  437 	add	a,#_table
      000016 F9               [12]  438 	mov	r1,a
      000017 87 80            [24]  439 	mov	_P0,@r1
                                    440 ;	a.c:21: dula=1;
                                    441 ;	assignBit
      000019 D2 A6            [12]  442 	setb	_P2_6
                                    443 ;	a.c:22: dula=0;
                                    444 ;	assignBit
      00001B C2 A6            [12]  445 	clr	_P2_6
                                    446 ;	a.c:23: P0=0xc0;
      00001D 75 80 C0         [24]  447 	mov	_P0,#0xc0
                                    448 ;	a.c:24: wela=1;
                                    449 ;	assignBit
      000020 D2 A7            [12]  450 	setb	_P2_7
                                    451 ;	a.c:25: wela=0;
                                    452 ;	assignBit
      000022 C2 A7            [12]  453 	clr	_P2_7
                                    454 ;	a.c:26: }
      000024 22               [24]  455 	ret
                                    456 ;------------------------------------------------------------
                                    457 ;Allocation info for local variables in function 'main'
                                    458 ;------------------------------------------------------------
                                    459 ;	a.c:27: void main()
                                    460 ;	-----------------------------------------
                                    461 ;	 function main
                                    462 ;	-----------------------------------------
      000025                        463 _main:
                                    464 ;	a.c:29: dula=0;
                                    465 ;	assignBit
      000025 C2 A6            [12]  466 	clr	_P2_6
                                    467 ;	a.c:30: wela=0;
                                    468 ;	assignBit
      000027 C2 A7            [12]  469 	clr	_P2_7
                                    470 ;	a.c:31: while(1)
      000029                        471 00150$:
                                    472 ;	a.c:33: P3=0xfe;
      000029 75 B0 FE         [24]  473 	mov	_P3,#0xfe
                                    474 ;	a.c:34: temp=P3;
      00002C 85 B0*03         [24]  475 	mov	_temp,_P3
                                    476 ;	a.c:35: temp=temp&0xf0;
      00002F 53*03 F0         [24]  477 	anl	_temp,#0xf0
                                    478 ;	a.c:36: if(temp!=0xf0)
      000032 74 F0            [12]  479 	mov	a,#0xf0
      000034 B5*03 02         [24]  480 	cjne	a,_temp,00286$
      000037 80 54            [24]  481 	sjmp	00112$
      000039                        482 00286$:
                                    483 ;	a.c:38: delay(10);
      000039 75 82 0A         [24]  484 	mov	dpl,#0x0a
      00003C 12r00r00         [24]  485 	lcall	_delay
                                    486 ;	a.c:39: if(temp!=0xf0)
      00003F 74 F0            [12]  487 	mov	a,#0xf0
      000041 B5*03 02         [24]  488 	cjne	a,_temp,00287$
      000044 80 47            [24]  489 	sjmp	00112$
      000046                        490 00287$:
                                    491 ;	a.c:41: temp=P3;
      000046 85 B0*03         [24]  492 	mov	_temp,_P3
                                    493 ;	a.c:42: switch(temp)
      000049 74 7E            [12]  494 	mov	a,#0x7e
      00004B B5*03 02         [24]  495 	cjne	a,_temp,00288$
      00004E 80 22            [24]  496 	sjmp	00104$
      000050                        497 00288$:
      000050 74 BE            [12]  498 	mov	a,#0xbe
      000052 B5*03 02         [24]  499 	cjne	a,_temp,00289$
      000055 80 16            [24]  500 	sjmp	00103$
      000057                        501 00289$:
      000057 74 DE            [12]  502 	mov	a,#0xde
      000059 B5*03 02         [24]  503 	cjne	a,_temp,00290$
      00005C 80 0A            [24]  504 	sjmp	00102$
      00005E                        505 00290$:
      00005E 74 EE            [12]  506 	mov	a,#0xee
      000060 B5*03 12         [24]  507 	cjne	a,_temp,00106$
                                    508 ;	a.c:45: key=0;
      000063 75*04 00         [24]  509 	mov	_key,#0x00
                                    510 ;	a.c:46: break;
                                    511 ;	a.c:48: case 0xde:
      000066 80 0D            [24]  512 	sjmp	00106$
      000068                        513 00102$:
                                    514 ;	a.c:49: key=1;
      000068 75*04 01         [24]  515 	mov	_key,#0x01
                                    516 ;	a.c:50: break;
                                    517 ;	a.c:52: case 0xbe:
      00006B 80 08            [24]  518 	sjmp	00106$
      00006D                        519 00103$:
                                    520 ;	a.c:53: key=2;
      00006D 75*04 02         [24]  521 	mov	_key,#0x02
                                    522 ;	a.c:54: break;
                                    523 ;	a.c:56: case 0x7e:
      000070 80 03            [24]  524 	sjmp	00106$
      000072                        525 00104$:
                                    526 ;	a.c:57: key=3;
      000072 75*04 03         [24]  527 	mov	_key,#0x03
                                    528 ;	a.c:60: while(temp!=0xf0)
      000075                        529 00106$:
      000075 74 F0            [12]  530 	mov	a,#0xf0
      000077 B5*03 02         [24]  531 	cjne	a,_temp,00293$
      00007A 80 08            [24]  532 	sjmp	00108$
      00007C                        533 00293$:
                                    534 ;	a.c:62: temp=P3;
      00007C 85 B0*03         [24]  535 	mov	_temp,_P3
                                    536 ;	a.c:63: temp=temp&0xf0;
      00007F 53*03 F0         [24]  537 	anl	_temp,#0xf0
      000082 80 F1            [24]  538 	sjmp	00106$
      000084                        539 00108$:
                                    540 ;	a.c:67: display(key);
      000084 85*04 82         [24]  541 	mov	dpl,_key
      000087 12r00r12         [24]  542 	lcall	_display
                                    543 ;	a.c:85: P1=0xfe;
      00008A 75 90 FE         [24]  544 	mov	_P1,#0xfe
      00008D                        545 00112$:
                                    546 ;	a.c:88: P3=0xfd;
      00008D 75 B0 FD         [24]  547 	mov	_P3,#0xfd
                                    548 ;	a.c:89: temp=P3;
      000090 85 B0*03         [24]  549 	mov	_temp,_P3
                                    550 ;	a.c:90: temp=temp&0xf0;
      000093 53*03 F0         [24]  551 	anl	_temp,#0xf0
                                    552 ;	a.c:91: if(temp!=0xf0)
      000096 74 F0            [12]  553 	mov	a,#0xf0
      000098 B5*03 02         [24]  554 	cjne	a,_temp,00294$
      00009B 80 54            [24]  555 	sjmp	00124$
      00009D                        556 00294$:
                                    557 ;	a.c:93: delay(10);
      00009D 75 82 0A         [24]  558 	mov	dpl,#0x0a
      0000A0 12r00r00         [24]  559 	lcall	_delay
                                    560 ;	a.c:94: if(temp!=0xf0)
      0000A3 74 F0            [12]  561 	mov	a,#0xf0
      0000A5 B5*03 02         [24]  562 	cjne	a,_temp,00295$
      0000A8 80 47            [24]  563 	sjmp	00124$
      0000AA                        564 00295$:
                                    565 ;	a.c:96: temp=P3;
      0000AA 85 B0*03         [24]  566 	mov	_temp,_P3
                                    567 ;	a.c:97: switch(temp)
      0000AD 74 7D            [12]  568 	mov	a,#0x7d
      0000AF B5*03 02         [24]  569 	cjne	a,_temp,00296$
      0000B2 80 22            [24]  570 	sjmp	00116$
      0000B4                        571 00296$:
      0000B4 74 BD            [12]  572 	mov	a,#0xbd
      0000B6 B5*03 02         [24]  573 	cjne	a,_temp,00297$
      0000B9 80 16            [24]  574 	sjmp	00115$
      0000BB                        575 00297$:
      0000BB 74 DD            [12]  576 	mov	a,#0xdd
      0000BD B5*03 02         [24]  577 	cjne	a,_temp,00298$
      0000C0 80 0A            [24]  578 	sjmp	00114$
      0000C2                        579 00298$:
      0000C2 74 ED            [12]  580 	mov	a,#0xed
      0000C4 B5*03 12         [24]  581 	cjne	a,_temp,00118$
                                    582 ;	a.c:100: key=4;
      0000C7 75*04 04         [24]  583 	mov	_key,#0x04
                                    584 ;	a.c:101: break;
                                    585 ;	a.c:103: case 0xdd:
      0000CA 80 0D            [24]  586 	sjmp	00118$
      0000CC                        587 00114$:
                                    588 ;	a.c:104: key=5;
      0000CC 75*04 05         [24]  589 	mov	_key,#0x05
                                    590 ;	a.c:105: break;
                                    591 ;	a.c:107: case 0xbd:
      0000CF 80 08            [24]  592 	sjmp	00118$
      0000D1                        593 00115$:
                                    594 ;	a.c:108: key=6;
      0000D1 75*04 06         [24]  595 	mov	_key,#0x06
                                    596 ;	a.c:109: break;
                                    597 ;	a.c:111: case 0x7d:
      0000D4 80 03            [24]  598 	sjmp	00118$
      0000D6                        599 00116$:
                                    600 ;	a.c:112: key=7;
      0000D6 75*04 07         [24]  601 	mov	_key,#0x07
                                    602 ;	a.c:115: while(temp!=0xf0)
      0000D9                        603 00118$:
      0000D9 74 F0            [12]  604 	mov	a,#0xf0
      0000DB B5*03 02         [24]  605 	cjne	a,_temp,00301$
      0000DE 80 08            [24]  606 	sjmp	00120$
      0000E0                        607 00301$:
                                    608 ;	a.c:117: temp=P3;
      0000E0 85 B0*03         [24]  609 	mov	_temp,_P3
                                    610 ;	a.c:118: temp=temp&0xf0;
      0000E3 53*03 F0         [24]  611 	anl	_temp,#0xf0
      0000E6 80 F1            [24]  612 	sjmp	00118$
      0000E8                        613 00120$:
                                    614 ;	a.c:122: display(key);
      0000E8 85*04 82         [24]  615 	mov	dpl,_key
      0000EB 12r00r12         [24]  616 	lcall	_display
                                    617 ;	a.c:130: */       P1=0xfc;
      0000EE 75 90 FC         [24]  618 	mov	_P1,#0xfc
      0000F1                        619 00124$:
                                    620 ;	a.c:133: P3=0xfb;
      0000F1 75 B0 FB         [24]  621 	mov	_P3,#0xfb
                                    622 ;	a.c:134: temp=P3;
      0000F4 85 B0*03         [24]  623 	mov	_temp,_P3
                                    624 ;	a.c:135: temp=temp&0xf0;
      0000F7 53*03 F0         [24]  625 	anl	_temp,#0xf0
                                    626 ;	a.c:136: if(temp!=0xf0)
      0000FA 74 F0            [12]  627 	mov	a,#0xf0
      0000FC B5*03 02         [24]  628 	cjne	a,_temp,00302$
      0000FF 80 54            [24]  629 	sjmp	00136$
      000101                        630 00302$:
                                    631 ;	a.c:138: delay(10);
      000101 75 82 0A         [24]  632 	mov	dpl,#0x0a
      000104 12r00r00         [24]  633 	lcall	_delay
                                    634 ;	a.c:139: if(temp!=0xf0)
      000107 74 F0            [12]  635 	mov	a,#0xf0
      000109 B5*03 02         [24]  636 	cjne	a,_temp,00303$
      00010C 80 47            [24]  637 	sjmp	00136$
      00010E                        638 00303$:
                                    639 ;	a.c:141: temp=P3;
      00010E 85 B0*03         [24]  640 	mov	_temp,_P3
                                    641 ;	a.c:142: switch(temp)
      000111 74 7B            [12]  642 	mov	a,#0x7b
      000113 B5*03 02         [24]  643 	cjne	a,_temp,00304$
      000116 80 22            [24]  644 	sjmp	00128$
      000118                        645 00304$:
      000118 74 BB            [12]  646 	mov	a,#0xbb
      00011A B5*03 02         [24]  647 	cjne	a,_temp,00305$
      00011D 80 16            [24]  648 	sjmp	00127$
      00011F                        649 00305$:
      00011F 74 DB            [12]  650 	mov	a,#0xdb
      000121 B5*03 02         [24]  651 	cjne	a,_temp,00306$
      000124 80 0A            [24]  652 	sjmp	00126$
      000126                        653 00306$:
      000126 74 EB            [12]  654 	mov	a,#0xeb
      000128 B5*03 12         [24]  655 	cjne	a,_temp,00130$
                                    656 ;	a.c:145: key=8;
      00012B 75*04 08         [24]  657 	mov	_key,#0x08
                                    658 ;	a.c:146: break;
                                    659 ;	a.c:148: case 0xdb:
      00012E 80 0D            [24]  660 	sjmp	00130$
      000130                        661 00126$:
                                    662 ;	a.c:149: key=9;
      000130 75*04 09         [24]  663 	mov	_key,#0x09
                                    664 ;	a.c:150: break;
                                    665 ;	a.c:152: case 0xbb:
      000133 80 08            [24]  666 	sjmp	00130$
      000135                        667 00127$:
                                    668 ;	a.c:153: key=10;
      000135 75*04 0A         [24]  669 	mov	_key,#0x0a
                                    670 ;	a.c:154: break;
                                    671 ;	a.c:156: case 0x7b:
      000138 80 03            [24]  672 	sjmp	00130$
      00013A                        673 00128$:
                                    674 ;	a.c:157: key=11;
      00013A 75*04 0B         [24]  675 	mov	_key,#0x0b
                                    676 ;	a.c:160: while(temp!=0xf0)
      00013D                        677 00130$:
      00013D 74 F0            [12]  678 	mov	a,#0xf0
      00013F B5*03 02         [24]  679 	cjne	a,_temp,00309$
      000142 80 08            [24]  680 	sjmp	00132$
      000144                        681 00309$:
                                    682 ;	a.c:162: temp=P3;
      000144 85 B0*03         [24]  683 	mov	_temp,_P3
                                    684 ;	a.c:163: temp=temp&0xf0;
      000147 53*03 F0         [24]  685 	anl	_temp,#0xf0
      00014A 80 F1            [24]  686 	sjmp	00130$
      00014C                        687 00132$:
                                    688 ;	a.c:167: display(key);
      00014C 85*04 82         [24]  689 	mov	dpl,_key
      00014F 12r00r12         [24]  690 	lcall	_display
                                    691 ;	a.c:175: */     P1=0xf8;
      000152 75 90 F8         [24]  692 	mov	_P1,#0xf8
      000155                        693 00136$:
                                    694 ;	a.c:178: P3=0xf7;
      000155 75 B0 F7         [24]  695 	mov	_P3,#0xf7
                                    696 ;	a.c:179: temp=P3;
      000158 85 B0*03         [24]  697 	mov	_temp,_P3
                                    698 ;	a.c:180: temp=temp&0xf0;
      00015B 53*03 F0         [24]  699 	anl	_temp,#0xf0
                                    700 ;	a.c:181: if(temp!=0xf0)
      00015E 74 F0            [12]  701 	mov	a,#0xf0
      000160 B5*03 03         [24]  702 	cjne	a,_temp,00310$
      000163 02r00r29         [24]  703 	ljmp	00150$
      000166                        704 00310$:
                                    705 ;	a.c:183: delay(10);
      000166 75 82 0A         [24]  706 	mov	dpl,#0x0a
      000169 12r00r00         [24]  707 	lcall	_delay
                                    708 ;	a.c:184: if(temp!=0xf0)
      00016C 74 F0            [12]  709 	mov	a,#0xf0
      00016E B5*03 03         [24]  710 	cjne	a,_temp,00311$
      000171 02r00r29         [24]  711 	ljmp	00150$
      000174                        712 00311$:
                                    713 ;	a.c:186: temp=P3;
      000174 85 B0*03         [24]  714 	mov	_temp,_P3
                                    715 ;	a.c:187: switch(temp)
      000177 74 77            [12]  716 	mov	a,#0x77
      000179 B5*03 02         [24]  717 	cjne	a,_temp,00312$
      00017C 80 22            [24]  718 	sjmp	00140$
      00017E                        719 00312$:
      00017E 74 B7            [12]  720 	mov	a,#0xb7
      000180 B5*03 02         [24]  721 	cjne	a,_temp,00313$
      000183 80 16            [24]  722 	sjmp	00139$
      000185                        723 00313$:
      000185 74 D7            [12]  724 	mov	a,#0xd7
      000187 B5*03 02         [24]  725 	cjne	a,_temp,00314$
      00018A 80 0A            [24]  726 	sjmp	00138$
      00018C                        727 00314$:
      00018C 74 E7            [12]  728 	mov	a,#0xe7
      00018E B5*03 12         [24]  729 	cjne	a,_temp,00142$
                                    730 ;	a.c:190: key=12;
      000191 75*04 0C         [24]  731 	mov	_key,#0x0c
                                    732 ;	a.c:191: break;
                                    733 ;	a.c:193: case 0xd7:
      000194 80 0D            [24]  734 	sjmp	00142$
      000196                        735 00138$:
                                    736 ;	a.c:194: key=13;
      000196 75*04 0D         [24]  737 	mov	_key,#0x0d
                                    738 ;	a.c:195: break;
                                    739 ;	a.c:197: case 0xb7:
      000199 80 08            [24]  740 	sjmp	00142$
      00019B                        741 00139$:
                                    742 ;	a.c:198: key=14;
      00019B 75*04 0E         [24]  743 	mov	_key,#0x0e
                                    744 ;	a.c:199: break;
                                    745 ;	a.c:201: case 0x77:
      00019E 80 03            [24]  746 	sjmp	00142$
      0001A0                        747 00140$:
                                    748 ;	a.c:202: key=15;
      0001A0 75*04 0F         [24]  749 	mov	_key,#0x0f
                                    750 ;	a.c:205: while(temp!=0xf0)
      0001A3                        751 00142$:
      0001A3 74 F0            [12]  752 	mov	a,#0xf0
      0001A5 B5*03 02         [24]  753 	cjne	a,_temp,00317$
      0001A8 80 08            [24]  754 	sjmp	00144$
      0001AA                        755 00317$:
                                    756 ;	a.c:207: temp=P3;
      0001AA 85 B0*03         [24]  757 	mov	_temp,_P3
                                    758 ;	a.c:208: temp=temp&0xf0;
      0001AD 53*03 F0         [24]  759 	anl	_temp,#0xf0
      0001B0 80 F1            [24]  760 	sjmp	00142$
      0001B2                        761 00144$:
                                    762 ;	a.c:212: display(key);
      0001B2 85*04 82         [24]  763 	mov	dpl,_key
      0001B5 12r00r12         [24]  764 	lcall	_display
                                    765 ;	a.c:220: */     P1=0xf0;
      0001B8 75 90 F0         [24]  766 	mov	_P1,#0xf0
                                    767 ;	a.c:224: }
      0001BB 02r00r29         [24]  768 	ljmp	00150$
                                    769 	.area CSEG    (CODE)
                                    770 	.area CONST   (CODE)
                                    771 	.area XINIT   (CODE)
                                    772 	.area CABS    (ABS,CODE)
